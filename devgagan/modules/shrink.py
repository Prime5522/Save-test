from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from pyrogram.errors import *
import random
import requests
import string
import aiohttp
from devgagan import app
from devgagan.core.func import *
from datetime import datetime, timedelta
from motor.motor_asyncio import AsyncIOMotorClient
from config import MONGO_DB, WEBSITE_URL, AUTH_CHANNEL, AD_API, LOG_GROUP  
 
tclient = AsyncIOMotorClient(MONGO_DB)
tdb = tclient["telegram_bot"]
token = tdb["tokens"]

# ‚úÖ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
async def is_subscribed(bot, user_id, channels):
    for channel in channels:
        try:
            await bot.get_chat_member(channel, user_id)
        except UserNotParticipant:
            return False  # ‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø‡¶§‡ßá‡¶ì ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá False ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá
        except Exception:
            return False  # ‚úÖ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá False ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá
    return True  # ‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá True ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßá


async def create_ttl_index():
    await token.create_index("expires_at", expireAfterSeconds=0)
 
 
 
Param = {}
 
 
async def generate_random_param(length=8):
    """Generate a random parameter."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))
 
 
async def get_shortened_url(deep_link):
    api_url = f"https://{WEBSITE_URL}/api?api={AD_API}&url={deep_link}"
 
     
    async with aiohttp.ClientSession() as session:
        async with session.get(api_url) as response:
            if response.status == 200:
                data = await response.json()   
                if data.get("status") == "success":
                    return data.get("shortenedUrl")
    return None
 
 
async def is_user_verified(user_id):
    """Check if a user has an active session."""
    session = await token.find_one({"user_id": user_id})
    return session is not None
 
# ‚úÖ ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° (‡¶´‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡¶æ‡¶ß‡ßç‡¶Ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï)
@app.on_message(filters.command("start"))
async def start_command(client, message):
    user_id = message.from_user.id
    AUTH_CHANNEL = ["Prime_Botz"]

    subscribed = await is_subscribed(client, user_id, AUTH_CHANNEL)

    if not subscribed:
        btn = []
        for channel in AUTH_CHANNEL:
            chat = await client.get_chat(channel)
            btn.append([InlineKeyboardButton(f"‚úá Join {chat.title} ‚úá", url=chat.invite_link)])
        btn.append([InlineKeyboardButton("üîÑ Refresh", callback_data="refresh_check")])

        # ‚úÖ ‡¶¨‡¶æ‡¶ß‡ßç‡¶Ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡¶¨‡ßá
        sent_msg = await message.reply_photo(
            photo="https://i.ibb.co/WvQdtkyB/photo-2025-03-01-11-42-50-7482697636613455884.jpg",
            caption=(
                f"<b>üëã Hello {message.from_user.mention},\n\n"
                "If you want to use me, you must first join our updates channel. "
                "Click on \"‚úá Join Our Updates Channel ‚úá\" button. Then click on the \"Request to Join\" button. "
                "After joining, click on \"Refresh\" button.</b>"
            ),
            reply_markup=InlineKeyboardMarkup(btn)
        )
        return  # ‚úÖ ‡¶´‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶§‡ßÄ‡¶§ ‡¶Ü‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶ö‡¶≤‡¶¨‡ßá ‡¶®‡¶æ

    # ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßá
    image_url = "https://i.postimg.cc/SQVw7HCz/photo-2025-03-17-09-39-48-7482710873702662152.jpg"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú™ S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò ‚ú™", url="https://t.me/Prime_Botz_Support"), 
         InlineKeyboardButton("„ÄÑ ·¥ç·¥è·¥†…™·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü „ÄÑ", url="https://t.me/Prime_Movies4U")],
        [InlineKeyboardButton("„ÄÜ  ú·¥á ü·¥ò „ÄÜ", callback_data="help"), 
         InlineKeyboardButton("„ÄÜ ·¥Ä ô·¥è·¥ú·¥õ „ÄÜ", callback_data="about")],
        [InlineKeyboardButton("„ÄÑ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü „ÄÑ", url="https://t.me/Prime_Botz")],
        [InlineKeyboardButton("‚úß ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä ‚úß", url="https://t.me/Prime_Nayem")]
    ])

    await message.reply_photo(
        image_url,
        caption=(
            "**Hi üëã Welcome**\n\n"
            "**‚ú≥Ô∏è I can save posts from Channels or Groups where forwarding is off.**\n"
            "**‚ú≥Ô∏è Simply send the post link of a public channel.**\n"
            "**‚ú≥Ô∏è For private channels, You'll Have To Login. Send /help to know more.**"
        ),
        reply_markup=keyboard
    )

# ‚úÖ ‡¶π‡ßá‡¶≤‡ßç‡¶™ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®

@app.on_callback_query(filters.regex("help"))
async def help_callback(client, callback_query):
    help_text = """üìù **Read Bot Commands & Features:**

This is a very Powerful And Advanced Content Saver Bot

Using This Bot Can You Save Content from The Private Or Public Channels and Groups Where Copying and Forwarding Is off.

‚Üí For Public Channels You Can Just Send Me The link.

‚Üí But for Private Channels You'll Have to Login Your Telegram Account(Make Sure to Logout from The Bot After Your Job is Done)

1. /batch - Bulk extraction for posts (After login)
2. /cancel - Cancel ongoing batch process
3. /login - Log into the bot for private channel access
4. /logout - Logout from the bot
5. /myplan - Get details about your plans
6. /plan - Check premium plans
7. /transfer userID - Transfer premium to your beloved major purpose for resellers (Premium members only)
8. /session - Generate Pyrogram V2 session
9. /terms - Terms and conditions
10. /speedtest - Test the server speed (not available in v3)
11. /settings - Manage various settings

You can set CUSTOM THUMBNAIL, SESSION-based login, etc. from settings."""

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú™ S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò ‚ú™", url="https://t.me/Prime_Botz_Support")],
        [InlineKeyboardButton("‚¨ÖÔ∏è Back to Home", url="https://t.me/Save_Restricted_Content_PrimeBot?start=start")]
    ])

    await callback_query.message.edit_text(help_text, reply_markup=keyboard)

 
# ‚úÖ ‡¶è‡¶¨‡¶æ‡¶â‡¶ü ‡¶¨‡¶æ‡¶ü‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
@app.on_callback_query(filters.regex("about"))
async def about_callback(client, callback_query): 
    about_text = """<b>‚îÄ‚îÄ[ <a href="https://t.me/Prime_Botz">MY DETAILS BY PRIME BOTZ üî•</a> ]‚îÄ‚îÄ</b>

‚ñ∏ ·¥ç è …¥·¥Ä·¥ç·¥á : <a href="https://t.me/Save_Restricted_Content_PrimeBot">SAVE RESTRICTED CONTENT BOT</a>
‚ñ∏ ·¥ç è  ô·¥ás·¥õ “ì Ä…™·¥á…¥·¥Ö : <a href="tg://settings">·¥õ ú…™s ·¥ò·¥á Äs·¥è…¥</a>
‚ñ∏ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä : <a href="https://t.me/Prime_Nayem">·¥ç Ä.·¥ò Ä…™·¥ç·¥á</a>
‚ñ∏ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü : <a href="https://t.me/Prime_Botz">·¥ò Ä…™·¥ç·¥á  ô·¥è·¥õ·¥¢</a>
‚ñ∏ ·¥ç·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü : <a href="https://t.me/Prime_Movies4U">·¥ò Ä…™·¥ç·¥á ·¥ç·¥è·¥†…™·¥ás</a>
‚ñ∏ s·¥ú·¥ò·¥ò·¥è Ä·¥õ …¢ Ä·¥è·¥ú·¥ò : <a href="https://t.me/Prime_Botz_Support">·¥ò Ä…™·¥ç·¥á  ô·¥è·¥õ·¥¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ</a>
‚ñ∏ ·¥Ö·¥Ä·¥õ·¥Ä  ô·¥Äs·¥á : <a href="https://www.mongodb.com">·¥ç·¥è…¥…¢·¥è ·¥Ö ô</a>
‚ñ∏  ô·¥è·¥õ s·¥á Ä·¥†·¥á Ä : <a href="https://heroku.com"> ú·¥á Ä·¥è·¥ã·¥ú</a>
‚ñ∏  ô·¥ú…™ ü·¥Ö s·¥õ·¥Ä·¥õ·¥ús : v2.7.1 [s·¥õ·¥Ä ô ü·¥á]"""

    await message.reply_text(
    text=about_text, 
    parse_mode="HTML",
    disable_web_page_preview=True
)

# ‚úÖ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
@app.on_callback_query(filters.regex("refresh_check"))  
async def refresh_callback(client: Client, query: CallbackQuery):  
    user_id = query.from_user.id  
    subscribed = await is_subscribed(client, user_id, AUTH_CHANNEL)  

    if subscribed:
        # ‚úÖ ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶¨‡ßá
        await query.message.delete()  
        await query.message.reply_text(
            "‚úÖ Thank you for joining! Now you can use me.\n\nIf you face any problem, type /help"
        )
    else:
        # ‚ùå ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ú‡ßü‡ßá‡¶® ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡¶™-‡¶Ü‡¶™ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
        await query.answer("‚ùå You have not joined yet. Please join first, then refresh.", show_alert=True)

# ‚úÖ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°, ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü, ‡¶Æ‡¶ø‡¶°‡¶ø‡ßü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶´‡ßã‡¶∞‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßá
@app.on_message(filters.text | filters.command | filters.media)
async def force_subscription_check(client, message):
    user_id = message.from_user.id
    subscribed = await is_subscribed(client, user_id, AUTH_CHANNEL)

    if not subscribed:
        btn = []
        for channel in AUTH_CHANNEL:
            chat = await client.get_chat(channel)
            btn.append([InlineKeyboardButton(f"‚úá Join {chat.title} ‚úá", url=chat.invite_link)])
        btn.append([InlineKeyboardButton("üîÑ Refresh", callback_data="refresh_check")])

        # ‚úÖ ‡¶¨‡¶æ‡¶ß‡ßç‡¶Ø‡¶§‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡¶¨‡ßá
        sent_msg = await message.reply_photo(
            photo="https://i.ibb.co/WvQdtkyB/photo-2025-03-01-11-42-50-7482697636613455884.jpg",
            caption=(
                f"<b>üëã Hello {message.from_user.mention},\n\n"
                "If you want to use me, you must first join our updates channel. "
                "Click on \"‚úá Join Our Updates Channel ‚úá\" button. Then click on the \"Request to Join\" button. "
                "After joining, click on \"Refresh\" button.</b>"
            ),
            reply_markup=InlineKeyboardMarkup(btn)
        )
        return  # ‚úÖ ‡¶´‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶æ‡¶¨‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶§‡ßÄ‡¶§ ‡¶Ü‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶ö‡¶≤‡¶¨‡ßá ‡¶®‡¶æ

    # ‚úÖ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶¨‡¶ü ‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï ‡¶®‡¶ø‡ßü‡¶Æ‡ßá ‡¶ö‡¶≤‡¶¨‡ßá
    await app.process_message(message)
